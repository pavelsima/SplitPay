import { isValidIBAN, isValidBIC } from 'ibantools';
import format from 'date-fns/format';
import isValid from 'date-fns/isValid';

class Key {
    constructor(name, value, structure) {
        this.name = name;
        this.value = value;
        this.structure = structure;
        if (this.structure && !this.isValid()) {
            throw 'The ' + this.name + ' key is in wrong format!';
        }
    }
    isValid() {
        return this.structure.test(this.value);
    }
    toString() {
        return this.name + ':' + this.value;
    }
}
class Acc extends Key {
    constructor(value) {
        super('acc', value);
        if (!this.isValid()) {
            throw 'The ' + this.name + ' key is in wrong format!';
        }
    }
    isValid() {
        const parts = this.value.split('+');
        if (parts.length === 1) {
            return isValidIBAN(this.value);
        }
        else {
            return isValidIBAN(parts[0]) && isValidBIC(parts[1]);
        }
    }
}
class AltAcc extends Key {
    constructor(value) {
        super('alt-acc', value.join(','));
        if (!this.isValid()) {
            throw 'The ' + this.name + ' key is in wrong format!';
        }
    }
    isValid() {
        const accs = this.value.split(',');
        return accs.every((value) => {
            return new Acc(value).isValid();
        });
    }
}
class Am extends Key {
    constructor(value) {
        super('am', value, /^[1-9][0-9]*(\.[0-9][0-9])?$/);
    }
}
class Cc extends Key {
    constructor(value) {
        super('cc', value, /^AED|AFN|ALL|AMD|ANG|AOA|ARS|AUD|AWG|AZN|BAM|BBD|BDT|BGN|BHD|BIF|BMD|BND|BOB|BRL|BSD|BTN|BWP|BYR|BZD|CAD|CDF|CHF|CLP|CNY|COP|CRC|CUC|CUP|CVE|CZK|DJF|DKK|DOP|DZD|EGP|ERN|ETB|EUR|FJD|FKP|GBP|GEL|GGP|GHS|GIP|GMD|GNF|GTQ|GYD|HKD|HNL|HRK|HTG|HUF|IDR|ILS|IMP|INR|IQD|IRR|ISK|JEP|JMD|JOD|JPY|KES|KGS|KHR|KMF|KPW|KRW|KWD|KYD|KZT|LAK|LBP|LKR|LRD|LSL|LYD|MAD|MDL|MGA|MKD|MMK|MNT|MOP|MRO|MUR|MVR|MWK|MXN|MYR|MZN|NAD|NGN|NIO|NOK|NPR|NZD|OMR|PAB|PEN|PGK|PHP|PKR|PLN|PYG|QAR|RON|RSD|RUB|RWF|SAR|SBD|SCR|SDG|SEK|SGD|SHP|SLL|SOS|SPL|SRD|STD|SVC|SYP|SZL|THB|TJS|TMT|TND|TOP|TRY|TTD|TVD|TWD|TZS|UAH|UGX|USD|UYU|UZS|VEF|VND|VUV|WST|XAF|XCD|XDR|XOF|XPF|YER|ZAR|ZMW|ZWD$/);
    }
}
class Rf extends Key {
    constructor(value) {
        super('rf', value, /^[0-9]{1,16}$/);
    }
}
class Rn extends Key {
    constructor(value) {
        super('rn', value, /^[^*]{1,35}$/);
    }
}
class Dt extends Key {
    constructor(value) {
        super('dt', format(value, 'yyyyMMdd'));
        this.originalDate = value;
        if (!this.isValid()) {
            throw 'The ' + this.name + ' key is in wrong format!';
        }
    }
    isValid() {
        return isValid(this.originalDate);
    }
}
class Pt extends Key {
    constructor(value) {
        super('pt', value, /^[^*]{1,3}$/);
    }
}
class Msg extends Key {
    constructor(value) {
        super('msg', value, /^[^*]{1,60}$/);
    }
}
class Crc32 extends Key {
    constructor(value) {
        super('crc32', value, /^[A-F0-9]{8,8}$/);
    }
}
class Xper extends Key {
    constructor(value) {
        super('x-per', value, /^(30|[12]?[0-9])$/);
    }
}
class Xvs extends Key {
    constructor(value) {
        super('x-vs', value, /^[1-9][0-9]{0,9}$/);
    }
}
class Xss extends Key {
    constructor(value) {
        super('x-ss', value, /^[1-9][0-9]{0,9}$/);
    }
}
class Xks extends Key {
    constructor(value) {
        super('x-ks', value, /^[1-9][0-9]{0,9}$/);
    }
}
class Xid extends Key {
    constructor(value) {
        super('x-id', value, /^[^*]{1,20}$/);
    }
}
const keyMap = {
    acc: Acc,
    altAcc: AltAcc,
    am: Am,
    cc: Cc,
    rf: Rf,
    rn: Rn,
    dt: Dt,
    pt: Pt,
    msg: Msg,
    crc32: Crc32,
    xper: Xper,
    xvs: Xvs,
    xss: Xss,
    xks: Xks,
    xid: Xid
};

function spayd(paymentDescription) {
    const header = 'SPD*1.0';
    const keys = [];
    for (const key in paymentDescription) {
        if (!keyMap[key]) {
            throw 'Was given an unsupported key: ' + key;
        }
        keys.push(new keyMap[key](paymentDescription[key]));
    }
    return `${header}*${keys.sort().join('*').toUpperCase()}`;
}

export default spayd;
//# sourceMappingURL=spayd.esm.js.map
